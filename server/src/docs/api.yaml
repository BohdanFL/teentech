openapi: 3.0.0
info:
  title: Authentication API
  version: 1.0.0
  description: API endpoints for user authentication and management.

servers:
  - url: http://localhost:3000

paths:
  /auth/login:
    post:
      summary: Login user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  description: User's password
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  access_token:
                    type: string
                    description: JWT access token
                  user:
                    type: object
                    description: User metadata
        "400":
          description: Bad request (e.g., invalid credentials, email not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error, please try again later"

  /auth/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  description: User's password (minimum 6 characters)
              required:
                - username
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  user:
                    type: object
                    description: User metadata
        "400":
          description: Bad request (e.g., email or username already in use, password too short)
          content:
            application/json:
              schema:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email already in use"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error, please try again later"

  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /protected:
    get:
      summary: Get protected resource (requires authentication)
      tags:
        - Protected Resources
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful retrieval of protected resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This is protected route"
                  user:
                    type: object
                    description: User information from request

  /auth/refresh-token:
    post:
      summary: Refresh access token using refresh token (sent via cookie)
      tags:
        - Authentication
      responses:
        "200":
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
                  user:
                    type: object
                    description: User metadata
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds
        "401":
          description: Unauthorized (no refresh token provided)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden (invalid refresh token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid refresh token"

  /auth/google:
    get:
      summary: Initiate Google OAuth login
      tags:
        - OAuth
      responses:
        "302":
          description: Redirect to Google OAuth authorization URL
          headers:
            Location:
              description: URL to redirect to for Google OAuth

  /auth/google/callback:
    get:
      summary: Callback endpoint for Google OAuth
      tags:
        - OAuth
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
          description: Authorization code from Google OAuth
      responses:
        "302":
          description: Redirect to frontend application after successful authentication
          headers:
            Location:
              description: URL to redirect to frontend application

  /auth/reset-password:
    post:
      summary: Request password reset email
      tags:
        - Password Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address to reset password for
              required:
                - email
      responses:
        "200":
          description: Password recovery email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password recovery email has been sent."
        "400":
          description: Bad request (e.g., email not found, no email provided)
          content:
            application/json:
              schema:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error, please try again later"

  /auth/update-password:
    post:
      summary: Update user password (requires authentication)
      tags:
        - Password Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  description: New password
              required:
                - newPassword
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."
        "400":
          description: Bad request (e.g., new password not provided)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "New password are required."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error, please try again later"

  /auth/confirm-reset:
    get:
      summary: Confirm password reset via token (redirects to frontend)
      tags:
        - Password Management
      parameters:
        - in: query
          name: token_hash
          schema:
            type: string
          required: true
          description: Token hash from password reset email link
        - in: query
          name: type
          schema:
            type: string
            enum: [recovery] # Assuming type is always 'recovery' for password reset
          required: true
          description: Type of verification (e.g., 'recovery')
        - in: query
          name: next
          schema:
            type: string
          description: Path to redirect to after successful confirmation (optional, defaults to '/')
      responses:
        "303":
          description: Redirect to frontend application after successful confirmation
          headers:
            Location:
              description: URL to redirect to frontend application

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
